#! /usr/bin/env python2.7

#
# check_mysql_config: MySQL configuration nagios probe using percona-tools
#
# Copyright (C) 2015 Denis Pompilio (jawa) <denis.pompilio@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import os
import sys
import ConfigParser


# XXX: Need improvement for portability
PTDIFF = '/home/nbs/mysql/pt-config-diff'
ONDISK_CFG = '/tmp/my.cnf'
LIVE_CFG = 'h= --defaults-file=/etc/mysql/root.cnf'


def usage():
    """Show usage
    """
    print("""check_mysql_config [options]
    
    Options:
    -h|--help       Show this help
    -p              Run as Nagios nrpe probe
    -f <file>       Fix configuration derive in <file>
                    Target file should be included in mysql configuration

    Examples:
    check_mysql_config -f /etc/mysql/conf.d/specifics_fixes.cnf
    """)


def get_mysql_configs():
    """Get MySQL standard configuration files

    :return: :func:`list` of mysql configuration filenames
    """
    # XXX: Need improvement for portability
    cfgs = ["/etc/mysql/my.cnf"]
    for cfg in os.listdir('/etc/mysql/conf.d'):
        if cfg.endswith('.cnf'):
            cfgs.append('/etc/mysql/conf.d/%s' % (cfg,))
    return cfgs


def raise_probe_results(stdout, stderr):
    """Return nagios probe result for nrpe queries

    :arg str stdout: Check command standard output content
    :arg str stderr: Check command standard error content

    :return: Error code as :func:`int`
    """
    if len(stderr):
        print('[CRITICAL] %s' % (stderr,))
        return(2)

    if len(stdout):
        print('[CRITICAL] %s' % (stdout,))
        return(2)

    print('[OK] live configuration saved on disk')
    return(0)


def fix_mysql_configuration(output, filename):
    """Fix mysql configuration derive from percona-tool output

    :arg str output: Check command standard output content
    """
    cfg = open(filename, 'w')
    cfg.write('# File generated by check_mysql_config\n')
    for line in output.splitlines():
        cfg.write('# %s\n' % (line,))
    cfg.write('\n')

    rcp = ConfigParser.RawConfigParser()
    rcp.add_section('mysqld')

    # skip 3 first header lines from output
    for line in output.splitlines()[3:]:
        (opt, v_saved, v_live) = line.split(None, 2)
        rcp.set('mysqld', opt, v_live)

    rcp.write(cfg)


if __name__ == "__main__":
    action = '-p'
    target = None
    if len(sys.argv) > 1:
        try:
            action = sys.argv[1]
            if action in ['-f']:
                target = sys.argv[2]
        except IndexError:
            usage()
            exit(2)

    # Parse mysql configuration files and aggregate them for pt-config-diff
    # pt-config-diff does not handle well configuration includes
    rcp = ConfigParser.RawConfigParser(allow_no_value=True)
    rcp.read(get_mysql_configs())
    rcp.write(open(ONDISK_CFG, 'w'))

    run = os.popen3('%s %s %s' % (PTDIFF, ONDISK_CFG, LIVE_CFG))
    out = run[1].read().strip()
    err = run[2].read().strip()

    if action == '-p':
        # Handle nagios probe exits
        exit(raise_probe_results(out, err))

    elif action == '-f':
        if len(err):
            print(err)
            sys.exit(2)
        fix_mysql_configuration(out, target)
